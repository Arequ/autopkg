---
name: Test AutoPkg

on:
  push:
    paths:
      - "**.py"
      - "new_requirements.txt"
      - ".github/workflows/tests.yaml"
  pull_request:
    paths:
      - "**.py"
      - "new_requirements.txt"
      - ".github/workflows/tests.yaml"
  schedule:
    # run first day of every month:
    - cron: "* * 1 * *"

jobs:
  unittests:
    strategy:
      matrix:
        # https://ncorti.com/blog/howto-github-actions-build-matrix
        # ubuntu-latest, macos-latest, windows-latest
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      # only needed on self hosted windows runners:
      - name: set powershell execution policy CurrentUser
        if: runner.os == 'Windows'
        shell: cmd
        run: powershell -command "Set-ExecutionPolicy -Force -ExecutionPolicy RemoteSigned -Scope CurrentUser"

      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Set token
        run: |
          cd ~
          echo ${{ secrets.GITHUB_TOKEN }} > ".autopkg_gh_token"

      - name: Install requirements
        run: pip install --requirement requirements.txt

      - name: create empty config windows
        # https://stackoverflow.com/questions/57946173/github-actions-run-step-on-specific-os
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          if not exist "%USERPROFILE%/AppData/Local/Autopkg" mkdir "%USERPROFILE%/AppData/Local/Autopkg"
          if not exist "%USERPROFILE%/AppData/Local/Autopkg/config.json" echo {} > "%USERPROFILE%/AppData/Local/Autopkg/config.json"
      - name: create default autopkg config file Linux
        if: runner.os == 'Linux'
        run: |
          cd ~ && mkdir -p .config/Autopkg
          cd ~ && echo {} > .config/Autopkg/config.json
      - name: run unittests
        run: python Scripts/run_tests.py
      - name: run e2e tests
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "**List-processors:"
          python Code/autopkg list-processors --prefs tests/preferences.plist
          echo "**Processor-info:"
          python Code/autopkg processor-info URLDownloader --prefs tests/preferences.plist
          echo "**Repo-add:"
          python Code/autopkg repo-add recipes --prefs tests/preferences.plist
          echo "**Repo-list:"
          python Code/autopkg repo-list --prefs tests/preferences.plist
          echo "**Repo-update:"
          python Code/autopkg repo-update all --prefs tests/preferences.plist
          echo "**Audit:"
          python Code/autopkg audit Firefox.munki --prefs tests/preferences.plist
          echo "**Info:"
          python Code/autopkg info Firefox.munki --prefs tests/preferences.plist
          echo "**List-recipes:"
          python Code/autopkg list-recipes --prefs tests/preferences.plist
          echo "**Make-override:"
          python Code/autopkg make-override Firefox.munki --force --prefs tests/preferences.plist
          echo "**New-recipe:"
          python Code/autopkg new-recipe TestRecipe.check --prefs tests/preferences.plist
          echo "**Search:"
          python Code/autopkg search Firefox --prefs tests/preferences.plist
          echo "**Verify-trust-info:"
          python Code/autopkg verify-trust-info Firefox.munki --prefs tests/preferences.plist
          echo "**Update-trust-info:"
          python Code/autopkg update-trust-info Firefox.munki --prefs tests/preferences.plist
          echo "**Version:"
          python Code/autopkg version
          echo "**Repo-delete:"
          python Code/autopkg repo-delete recipes --prefs tests/preferences.plist
